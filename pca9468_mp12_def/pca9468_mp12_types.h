#ifndef _PCA9468_MP12_TYPES_H_
#define _PCA9468_MP12_TYPES_H_

/*			pca9468_MP12_types.h
 *			Created: 2017/01/31
 *          Author: Yang Yin
 *        
 *			This header defines types exposed to the outside world 
 */

/* Result codes */
typedef enum {
	pr_ok,
	pr_badparam,
	pr_ioerror,
	pr_disconnect,
	pr_connect,
	pr_noconnection
} pca_notify_t;

/* Enumeration for MP12 all data fields */
typedef enum data_fields_enum {
	/*REG 0x00, Device Info*/
	dev_id,
	dev_rev,
	/*REG 0x01, INT1 (RC)*/
	v_ok_int,
	ntc_temp_int,
	chg_phase_int,
	pwr_collapse_int,
	ctrl_limit_int,
	temp_reg_int,
	adc_done_int,
	timer_int,
	/*REG 0x02, INT1_MASK (R/W)*/
	v_ok_m,
	ntc_temp_m,
	chg_phase_m,
	pwr_collapse_m,
	ctrl_limit_m,
	temp_reg_m,
	adc_done_m,
	timer_m,
	/*REG 0x03, INT1_STS (R)*/
	v_ok_sts,
	ntc_temp_sts,
	chg_phase_sts,
	pwr_collapse_sts,
	ctrl_limit_sts,
	temp_reg_sts,
	adc_done_sts,
	timer_sts,
	/*REG 0x04, STS_A (R)*/
	iin_loop_sts,
	chg_loop_sts,
	vflt_loop_sts,
	rsvd_1,
	vout_uv_sts,
	vbat_ov_sts,
	vin_ov_sts,
	vin_uv_sts,
	/*REG 0x05, STS_B (R)*/
	batt_miss_sts,
	ocp_fast_sts,
	ocp_avg_sts,
	active_state_sts,
	shutdown_state_sts,
	standby_state_sts,
	charge_timer_sts,
	watchdog_timer_sts,
	/*REG 0x06, STS_C (R)*/
	iin_sts,
	/*REG 0x07, STS_D (R)*/
	ichg_sts,
	/*REG 0x08-0x10, STS_ADC_1-9 (R)*/
	adc_iin,
	adc_iout,
	adc_vin,
	adc_vout,
	adc_vbat,
	adc_dietemp,
	adc_ntcv,
	/*REG 0x20, ICHG_CTRL (R/W)*/
	ichg_ss,
	ichg_cfg,
	/*REG 0x21, IIN_CTRL (R/W)*/
	limit_increment_en,
	iin_ss,
	iin_cfg,
	/*REG 0x22, START_CTRL (R/W)*/
	snsres,
	cfg_en,
	standby_en,
	rev_iin_det,
	fsw_cfg,
	/*REG 0x23, ADC_CTRL (R/W)*/
	force_adc_mode,
	hibernate_delay,
	adc_offset_cfg,
	adc_osr_cfg,
	adc_en,
	/*REG 0x24, ADCCH_CFG (R/W)*/
	ch7_en,
	ch6_en,
	ch5_en,
	ch4_en,
	ch3_en,
	ch2_en,
	ch1_en,
	/*REG 0x25, TEMP_CTRL (R/W)*/
	temp_reg,
	temp_delta,
	temp_reg_en,
	ntc_protection_en,
	temp_max_en,
	/*REG 0x26, PWR_COLLAPSE (R/W)*/
	uv_delta,
	collapse_det_en,
	iin_force_count,
	bat_miss_det_en,
	batt_miss_shdn_en,
	/*REG 0x27, V_FLOAT (R/W)*/
	v_float,
	/*REG 0x28, SAFETY_CTRL (R/W)*/
	watchdog_en,
	watchdog_cfg,
	chg_timer_en,
	chg_timer_cfg,
	ov_delta,
	/*REG 0x29-0x2A, NTC_THRESHOLD_1(R/W)*/
	ntc_threshold,
	/* registers */
	reg_0,
	reg_1,
	reg_2,
	reg_3,
	reg_4,
	reg_5,
	reg_6,
	reg_7,
	reg_8,
	reg_9,
	reg_a,
	reg_b,
	reg_c,
	reg_d,
	reg_e,
	reg_f,
	reg_10,
	reg_20,
	reg_21,
	reg_22,
	reg_23,
	reg_24,
	reg_25,
	reg_26,
	reg_27,
	reg_28,
	reg_29,
	reg_2A,
	number_of_dataFields
} pca_data_fields_enum_t;

#if 0
/* Enumeration for all data fields */
typedef enum data_fields_enum {
	dev_id,
	dev_rev,
	vbus_ovp_mask,
	ibus_reg_mask,
	vbat_reg_mask,
	ibat_reg_mask,
	vout_reg_mask,
	vbus_otp_mask,
	tbat_otp_mask,
	ibus_rev_mask,
	wd_mask,
	adc_done_mask,
	vdrop_alm_mask,
	vdrop_ovp_mask,
	vbus_ins_mask,
	bat_ins_mask,
	tshut_mask,
	ioc_mask,
	vbus_ovp_flt,
	ibus_reg_ldo,
	vbat_reg_ldo, 
	ibat_reg_ldo,
	vout_reg_ldo,
	tbus_otp_flt,
	tbat_otp_flt,
	ibus_irev_flt,
	wd_flt,
	adc_done,
	vdrop_alm_flt,
	vdrop_ovp_flt,
	vbus_ins,
	bat_ins,
	tshut_flt,
	ioc_flt,
	vbus_ovp_en,
	ibus_reg_en,
	vbat_reg_en,
	ibat_reg_en,
	vout_reg_en,
	tbus_otp_en, 
	tbat_otp_en,
	vbus_pd_en,
	vdrop_ovp_en, 
	vdrop_alm_en,
	sense_r,
	chg_en,
	watchdog,
	irev_set,
	reg_rst,
	tdie_adc_en,
	adc_en,
	adc_rate,
	adc_avg_en,
	adc_samples,
	vbus_adc_en,
	ibus_adc_en,	
	vout_adc_en,
	vdrop_adc_en,
	vbat_adc_en,
	ibat_adc_en,
	tbus_adc_en,	
	tbat_adc_en,
	ibus_ocp,
	ocp_res,
	vbus_ovp_dly,
	vbus_ovp,	
	vout_reg,
	vdrop_ovp,
	vdrop_alm,
	vbat_reg,
	ibat_reg,
	ibus_reg,
	tbus_reg,
	tbat_otp,
	vbus_adc,
	ibus_adc,
	vout_adc,
	vdrop_adc,
	vbat_adc,
	ibat_adc,
	tbus_adc,
	tbat_adc,
	die_temp,
	/* registers */
	reg_0,
	reg_1,
	reg_2,
	reg_3,
	reg_4,
	reg_5,
	reg_6,
	reg_7,
	reg_8,
	reg_9,
	reg_a,
	reg_b,
	reg_c,
	reg_d,
	reg_e,
	reg_f,
	reg_10,
	reg_11,
	reg_12,
	reg_13,
	reg_14,
	reg_15,
	reg_16,
	reg_17,
	reg_18,
	reg_19,
	reg_1a,
	reg_1b,
	reg_1c,
	reg_1d,
	reg_1e,
	reg_1f,
	reg_20,
	reg_21,
	reg_22,
	reg_23,
	number_of_dataFields
} pca_data_fields_enum_t;
#endif

typedef void(*pca_notify_function_t)(pca_data_fields_enum_t updatedField, pca_notify_t result);

#endif //_PCA9498_TYPES_H_